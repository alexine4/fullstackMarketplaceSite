-- MySQL Script generated by MySQL Workbench
-- Thu Jul  7 13:19:57 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

ALTER USER 'root'@'localhost' IDENTIFIED BY '01010203';

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `simpleMarket` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `simpleMarket` DEFAULT CHARACTER SET utf8 ;
SHOW WARNINGS;
USE `simpleMarket` ;

-- -------------------------------positions----------------------
-- Table `Category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `categories` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `categories` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `discription` VARCHAR(200) NOT NULL,
  `idUser` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `orders` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `orders` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `costs` VARCHAR(45) NOT NULL,
  `idUser` INT NOT NULL,
  `idPosition` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Position`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `positions` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `positions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(200) NOT NULL,
  `idCategory` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(60) NOT NULL,
  `email` VARCHAR(80) NOT NULL,
  `password` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

SHOW WARNINGS;
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


DELIMITER $$
USE `simpleMarket`$$
DROP TRIGGER IF EXISTS COST_AFTER_update $$
CREATE DEFINER = CURRENT_USER TRIGGER COST_AFTER_update
after update ON `orderLists` FOR EACH ROW
BEGIN
call costCalc(old.idOrder);
END$$
DELIMITER $$
USE `simpleMarket`$$
DROP TRIGGER IF EXISTS COST_AFTER_insert $$
CREATE DEFINER = CURRENT_USER TRIGGER COST_AFTER_insert
after insert ON `orderLists` FOR EACH ROW
BEGIN
call costCalc(new.idOrder);
END$$

DELIMITER $$
USE `simpleMarket`$$
DROP TRIGGER IF EXISTS COST_AFTER_delete $$
CREATE DEFINER = CURRENT_USER TRIGGER COST_AFTER_delete
after delete ON `orderLists` FOR EACH ROW
BEGIN
call costCalc(old.idOrder);
END$$

delimiter $$
drop procedure if exists costCalc$$
create procedure costCalc(in idOrder1 int)
begin
declare costs1  int;
select sum(cost) into costs1 from orderlists 
where idOrder = idOrder1;
update orders set costs = costs1
where id = idOrder1;
end$$

DELIMITER $$
USE `simpleMarket`$$
DROP TRIGGER IF EXISTS SYNC_POSITION_AND_CATEGORY_AFTER_delete $$
CREATE DEFINER = CURRENT_USER TRIGGER SYNC_POSITION_AND_CATEGORY_AFTER_delete
after delete ON `categories` FOR EACH ROW
BEGIN
delete from positions where positions.idCategory = old.categories.id;
END$$
